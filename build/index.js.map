{
  "version": 3,
  "sources": ["<stdin>", "../app/entry.server.tsx", "../app/root.tsx", "../app/lib/db.server.ts", "../app/usescases/jobs/job.schema.ts", "../app/routes/index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "/**\n * By default, Remix will handle generating the HTTP Response for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` \u2728\n * For more information, see https://remix.run/docs/en/main/file-conventions/entry.server\n */\n\nimport { PassThrough } from \"node:stream\";\nimport type { EntryContext } from \"@remix-run/node\";\nimport { Response } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport isbot from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onAllReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onShellReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          console.error(error);\n          responseStatusCode = 500;\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\nimport { db } from \"./lib/db.server\";\nimport { json } from \"@remix-run/node\";\n\nexport async function loader() {\n    try {\n        await db.initialize();\n        console.log('Database connection was initialized');\n        return json({}, { status: 200 });\n    } catch(err) {\n        const error = (err as Error).message;\n        console.error('[ERROR]', error);\n        return json({ error }, { status: 500 })\n    }\n}\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import { DataSource } from \"typeorm\";\nimport { JobEntity } from \"~/usescases/jobs/job.schema\";\n\nconst globalInstance = global as unknown as {\n    db: DataSource | undefined\n}\n\nexport const db =\n    globalInstance.db ??\n    new DataSource({\n        type: \"cockroachdb\",\n        url: process.env.DB_URL,\n        database: process.env.DB_NAME,\n        ssl: true,\n        logging: true,\n        extra: {\n            application_name: 'getrezume',\n            // options: 'getrezume'\n        },\n        timeTravelQueries: false,\n        entities: [\n            JobEntity\n        ]\n    });\n\nif (process.env.NODE_ENV !== 'production') {\n    globalInstance.db = db;\n}\n", "import { Column, CreateDateColumn, Entity, PrimaryColumn } from 'typeorm';\nimport { z } from 'zod';\n\nexport const JobSchema = z.object({\n    company: z.string().trim().min(5),\n    jobTitle: z.string().trim().min(5),\n    personId: z.string().length(36).trim(),\n    startDate: z.date(),\n    endDate: z.date().optional(),\n    mode: z.number().min(1).max(5)\n});\n\n@Entity()\nexport class JobEntity {\n    @PrimaryColumn({ name: 'oid', generated: \"uuid\" })\n    oid: string\n\n    personId: string\n\n    @Column({ type: \"text\", nullable: false, length: 50 })\n    company: string\n\n    @Column({ type: \"varchar\", name: \"job_title\", nullable: false, length: 50 })\n    jobTitle: string\n\n    @Column({ type: \"int\", name: \"mode\", default: 1 })\n    mode: number\n\n    @Column({ name: 'start_date', nullable: false })\n    startDate: Date\n\n    @Column({ name: 'end_date', nullable: true })\n    endDate?: Date\n\n    @CreateDateColumn()\n    createdAt: Date\n}\n", "import type { V2_MetaFunction } from \"@remix-run/node\";\n\nexport const meta: V2_MetaFunction = () => {\n  return [{ title: \"GetRezume\" }];\n};\n\nexport default function Index() {\n  return (\n    <div style={{ fontFamily: \"system-ui, sans-serif\", lineHeight: \"1.4\" }}>\n      <h1>Welcome to Remix</h1>\n\n    </div>\n  );\n}\n", "export default {'version':'d86b9d26','entry':{'module':'/build/entry.client-MEDF6GXE.js','imports':['/build/_shared/chunk-7RXCWVQ3.js','/build/_shared/chunk-VEJPBTMT.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-IB4FYXT2.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-GW3TIQKM.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'cssBundleHref':undefined,'hmr':undefined,'url':'/build/manifest-D86B9D26.js'};", "\nimport * as entryServer from \"/Users/keuller/workspace/personal/resumeapp/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"unstable_dev\":false,\"unstable_postcss\":false,\"unstable_tailwind\":false,\"v2_errorBoundary\":true,\"v2_meta\":true,\"v2_normalizeFormMethod\":true,\"v2_routeConvention\":true};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  \n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route1\n    }\n  };"],
  "mappings": "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",
  "names": ["isbot", "import_react", "import_typeorm", "import_node", "import_jsx_dev_runtime", "import_jsx_dev_runtime"]
}
